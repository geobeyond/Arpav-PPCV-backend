"""
Django settings for seagrid project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

from arpav_ppcv import config

ARPAV_PPCV = config.get_settings()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ARPAV_PPCV.django_app.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ARPAV_PPCV.debug

ALLOWED_HOSTS = [
    '*'
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
RESOURCE_ROOT = os.path.join(BASE_DIR, 'resources')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_celery_beat',
    'django_celery_results',
    'oauth2_provider',
    'channels',
    'rest_framework',
    'rest_framework_gis',
    'corsheaders',
    'guardian',
    'django.contrib.gis',
    #'revproxy',
    #'notifications',
    'djcore.djcore.core',
    'djcore.djcore.users',
    'djcore.djcore.groups',
    'padoa.thredds',
    'padoa.forecastattributes',
    'padoa.places',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

ROOT_URLCONF = 'djangoapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoapp.wsgi.application'
ASGI_APPLICATION = 'djangoapp.asgi.app'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': ARPAV_PPCV.django_app.db_engine,
        'NAME': ARPAV_PPCV.django_app.db_dsn.path[1:],
        'USER': ARPAV_PPCV.django_app.db_dsn.hosts()[0]["username"],
        'PASSWORD': ARPAV_PPCV.django_app.db_dsn.hosts()[0]["password"],
        'HOST': ARPAV_PPCV.django_app.db_dsn.hosts()[0]["host"],
        'PORT': ARPAV_PPCV.django_app.db_dsn.hosts()[0]["port"],
        'CONN_MAX_AGE': 3600
    }
}




# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'users.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = ARPAV_PPCV.django_app.static_mount_prefix

STATIC_ROOT = str(ARPAV_PPCV.django_app.static_root)

STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates'),)


REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        # 'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ],

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.JSONParser',
    # ),
    'EXCEPTION_HANDLER' : 'rest_framework.views.exception_handler',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

CORS_ORIGIN_ALLOW_ALL = True

X_FRAME_OPTIONS = "ALLOWALL"
# X_FRAME_OPTIONS = "ALLOW-FROM djangoapp.app"

CORS_ORIGIN_WHITELIST = (
    # 'google.com'
)

ELASTICSEARCH = {
    "host" : "localhost",
    "port" : 9200,
}

AUTHENTICATION_BACKENDS = (
    'oauth2_provider.backends.OAuth2Backend',
    # Uncomment following if you want to access the admin
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'read',
        'write': 'write',
    },
    'OAUTH2_BACKEND_CLASS': 'oauth2_provider.oauth2_backends.JSONOAuthLibCore',
    'ACCESS_TOKEN_EXPIRE_SECONDS': 120,    #REFRESH_TOKEN_EXPIRE_SECONDS    # 'APPLICATION_MODEL': 'djcore.djcore.oauth.models.Application'
    #'ACCESS_TOKEN_EXPIRE_SECONDS': 120,
    #REFRESH_TOKEN_EXPIRE_SECONDS
    # 'APPLICATION_MODEL': 'djcore.djcore.oauth.models.Application'
}
DEFAULT_SCOPES = ['read', 'write']

LOGIN_URL = '/oauth/login'
LOGIN_REDIRECT_URL = '/'

EMAIL_HOST = ARPAV_PPCV.django_app.email.host
EMAIL_HOST_USER = ARPAV_PPCV.django_app.email.host_user
EMAIL_HOST_PASSWORD = ARPAV_PPCV.django_app.email.host_password
EMAIL_PORT = ARPAV_PPCV.django_app.email.port

LOGGING = {
    'version': 1,
    # ...
    'handlers': {
        # ...
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        # ....
        # 'oauthlib': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'django.request': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
    },
}

ACCEPTED_UPLOAD_MEDIA_TYPES = [

    # Shapefile & friends
    'text/plain',
    'application/x-dbf',
    'application/octet-stream',

    # SLD style
    'application/xml',

    # TEST
    'application/pdf',
    'application/zip',
    'image/png',
    'image/tiff',

]


CELERY_BROKER_URL = ARPAV_PPCV.django_app.redis_dsn.unicode_string()
CELERY_RESULT_BACKEND = ARPAV_PPCV.django_app.redis_dsn.unicode_string()
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
# CELERYD_TASK_SOFT_TIME_LIMIT = 3600

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#            "hosts": [
#                (
#                    ARPAV_PPCV.django_app.redis_dsn.host,
#                    ARPAV_PPCV.django_app.redis_dsn.port
#                ),
#            ],  # set redis address
#         },
#     }
# }
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}
SESSION_ENGINE = 'redis_sessions.session'

SESSION_REDIS = {
    'host': ARPAV_PPCV.django_app.redis_dsn.host,
    'port': ARPAV_PPCV.django_app.redis_dsn.port,
    'db': 0,
    'password': '',
    'prefix': 'session',
    'socket_timeout': 1
}

THREDDS = {
    'host': ARPAV_PPCV.django_app.thredds.host,
    'auth_url': ARPAV_PPCV.django_app.thredds.auth_url,
    'port': ARPAV_PPCV.django_app.thredds.port,
    'user': ARPAV_PPCV.django_app.thredds.user,
    'password': ARPAV_PPCV.django_app.thredds.password,
    'proxy': ARPAV_PPCV.django_app.thredds.proxy,
}
