# docker compose file that can be used for deployment in the staging environment.
# - do not use this in production!
#
# In this file, do this:
#
# - use the `env_file` property to provide sensitive environment variables
#   from suitable .env file(s) which are kept off the code repository
#
# - pull the main services' images from the respective container registries
#   and only use the `latest` docker tag - we want to take advantage of the
#   fact that deployment will be triggered on each push to the `main`
#   branch(es) (which would imply that CI has passed and a new docker image
#   has been pushed to the registry)
#
# - do not mount source code inside any container - keep volume binds to the
#   minimum, only for relevant configuration file(s) and data collections

x-env-file-db: &env-file-db ${ARPAV_PPCV_DEPLOYMENT_ENV_FILE_DB_SERVICE:-/home/arpav/environment-files/db-service.env}
x-env-file-legacy-db: &env-file-legacy-db ${ARPAV_PPCV_DEPLOYMENT_ENV_FILE_LEGACY_DB_SERVICE:-/home/arpav/environment-files/legacy-db-service.env}
x-env-file-webapp: &env-file-webapp ${ARPAV_PPCV_DEPLOYMENT_ENV_FILE_WEBAPP_SERVICE:-/home/arpav/environment-files/webapp-service.env}

name: arpav-ppcv-staging

services:

  # NOTE: this traefik instance does not deal with TLS at all, as we assume there
  # is another proxy running on top of this one, provided
  # by the staging env
  reverse-proxy:
    command: --configFile /opt/traefik/traefik.toml
    volumes:
      - type: bind
        source: /home/arpav/docker/traefik/staging-config.toml
        target: /opt/traefik/traefik.toml

  webapp:
    env_file:
      - *env-file-webapp
    labels:
      - "traefik.http.routers.arpav-backend.entrypoints=webSecure"
      - "traefik.http.routers.arpav-backend.tls=true"
      - "traefik.http.routers.arpav-backend.tls.certResolver=letsEncryptResolver"
      - "traefik.http.routers.arpav-backend.rule=Host(`arpav.geobeyond.dev`)"
    volumes:
      - type: bind
        source: $HOME/data/arpav-ppcv/datasets
        target: /home/appuser/data/datasets
      - type: bind
        source: $HOME/data/arpav-ppcv/netcdf-uncertainty-example
        target: /home/appuser/data/additional
    restart: unless-stopped

  legacy-db:
    env_file:
      - *env-file-legacy-db
    volumes:
      - legacy-db-data:/var/lib/postgresql/data
    restart: unless-stopped

  db:
    env_file:
      - *env-file-db
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped

  martin:
    env_file:
      - *env-file-webapp
    labels:
      - "traefik.http.routers.martin-router.entrypoints=webSecure"
      - "traefik.http.routers.martin-router.tls=true"
      - "traefik.http.routers.martin-router.tls.certResolver=letsEncryptResolver"
      - "traefik.http.routers.martin-router.rule=Host(`arpav.geobeyond.dev`)"
    restart: unless-stopped

  thredds:
    image: unidata/thredds-docker:5.4
    env_file:
      - *env-file-webapp
    volumes:
      - type: bind
        source: /home/arpav/docker/thredds/content-root/catalog.xml
        target: /usr/local/tomcat/content/thredds/catalog.xml
      - type: bind
        source: /home/arpav/docker/thredds/content-root/catalog_rcm.xml
        target: /usr/local/tomcat/content/thredds/catalog_rcm.xml
      - type: bind
        source: /home/arpav/docker/thredds/content-root/threddsConfig.xml
        target: /usr/local/tomcat/content/thredds/threddsConfig.xml
      - type: bind
        source: /home/arpav/docker/thredds/content-root/wmsConfig.xml
        target: /usr/local/tomcat/content/thredds/wmsConfig.xml
      - type: bind
        source: /home/arpav/data/arpav-ppcv/datasets
        target: /datasets
      - type: bind
        source: /home/arpav/data/arpav-ppcv/netcdf-uncertainty-example
        target: /additional
    restart: unless-stopped

volumes:
  db-data:
  legacy-db-data:
